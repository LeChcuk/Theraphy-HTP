{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"colab":{"name":"keras-retinanet-ESRI2House3.ipnyb","provenance":[{"file_id":"1YYJRpCe7wdDyq8O5HnUXU6CZD-DDcIAK","timestamp":1590580822510},{"file_id":"1kOaFFfooZp04PrjdCpPo5xoxcpcMTiYc","timestamp":1590517721005},{"file_id":"https://github.com/pjw9412/DLCV/blob/master/Detection/retina/Esri_Object_Detection_Challenge.ipynb","timestamp":1589984945586}],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"x2VwTRw8f1jW","executionInfo":{"status":"ok","timestamp":1603513137450,"user_tz":-540,"elapsed":112283,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"fcb28deb-4858-4a07-b4ba-afb12574f2b4","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["!pip uninstall tensorflow\n","!pip install tensorflow-gpu==1.15.2\n","!pip install keras==2.3.0"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Uninstalling tensorflow-2.3.0:\n","  Would remove:\n","    /usr/local/bin/estimator_ckpt_converter\n","    /usr/local/bin/saved_model_cli\n","    /usr/local/bin/tensorboard\n","    /usr/local/bin/tf_upgrade_v2\n","    /usr/local/bin/tflite_convert\n","    /usr/local/bin/toco\n","    /usr/local/bin/toco_from_protos\n","    /usr/local/lib/python3.6/dist-packages/tensorflow-2.3.0.dist-info/*\n","    /usr/local/lib/python3.6/dist-packages/tensorflow/*\n","Proceed (y/n)? y\n","  Successfully uninstalled tensorflow-2.3.0\n","Collecting tensorflow-gpu==1.15.2\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/32/ca/58e40e5077fa2a92004f398d705a288e958434f123938f4ce75ffe25b64b/tensorflow_gpu-1.15.2-cp36-cp36m-manylinux2010_x86_64.whl (411.0MB)\n","\u001b[K     |████████████████████████████████| 411.0MB 42kB/s \n","\u001b[?25hRequirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (1.12.1)\n","Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (0.2.0)\n","Collecting keras-applications>=1.0.8\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/71/e3/19762fdfc62877ae9102edf6342d71b28fbfd9dea3d2f96a882ce099b03f/Keras_Applications-1.0.8-py3-none-any.whl (50kB)\n","\u001b[K     |████████████████████████████████| 51kB 9.0MB/s \n","\u001b[?25hRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (1.1.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (3.3.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (1.1.2)\n","Collecting tensorflow-estimator==1.15.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/de/62/2ee9cd74c9fa2fa450877847ba560b260f5d0fb70ee0595203082dafcc9d/tensorflow_estimator-1.15.1-py2.py3-none-any.whl (503kB)\n","\u001b[K     |████████████████████████████████| 512kB 59.2MB/s \n","\u001b[?25hRequirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (1.15.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (1.32.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (1.18.5)\n","Collecting gast==0.2.2\n","  Downloading https://files.pythonhosted.org/packages/4e/35/11749bf99b2d4e3cceb4d55ca22590b0d7c2c62b9de38ac4a4a7f4687421/gast-0.2.2.tar.gz\n","Collecting tensorboard<1.16.0,>=1.15.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1e/e9/d3d747a97f7188f48aa5eda486907f3b345cd409f0a0850468ba867db246/tensorboard-1.15.0-py3-none-any.whl (3.8MB)\n","\u001b[K     |████████████████████████████████| 3.8MB 51.6MB/s \n","\u001b[?25hRequirement already satisfied: wheel>=0.26; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (0.35.1)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (0.10.0)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (0.8.1)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==1.15.2) (3.12.4)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.8->tensorflow-gpu==1.15.2) (2.10.0)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow-gpu==1.15.2) (50.3.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow-gpu==1.15.2) (1.0.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.16.0,>=1.15.0->tensorflow-gpu==1.15.2) (3.2.2)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from markdown>=2.6.8->tensorboard<1.16.0,>=1.15.0->tensorflow-gpu==1.15.2) (2.0.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<1.16.0,>=1.15.0->tensorflow-gpu==1.15.2) (3.2.0)\n","Building wheels for collected packages: gast\n","  Building wheel for gast (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gast: filename=gast-0.2.2-cp36-none-any.whl size=7542 sha256=c14639704c99819e97ee6268cf2f396fc6fb0b064e81574ef60a3778da909ace\n","  Stored in directory: /root/.cache/pip/wheels/5c/2e/7e/a1d4d4fcebe6c381f378ce7743a3ced3699feb89bcfbdadadd\n","Successfully built gast\n","\u001b[31mERROR: tensorflow-probability 0.11.0 has requirement gast>=0.3.2, but you'll have gast 0.2.2 which is incompatible.\u001b[0m\n","Installing collected packages: keras-applications, tensorflow-estimator, gast, tensorboard, tensorflow-gpu\n","  Found existing installation: tensorflow-estimator 2.3.0\n","    Uninstalling tensorflow-estimator-2.3.0:\n","      Successfully uninstalled tensorflow-estimator-2.3.0\n","  Found existing installation: gast 0.3.3\n","    Uninstalling gast-0.3.3:\n","      Successfully uninstalled gast-0.3.3\n","  Found existing installation: tensorboard 2.3.0\n","    Uninstalling tensorboard-2.3.0:\n","      Successfully uninstalled tensorboard-2.3.0\n","Successfully installed gast-0.2.2 keras-applications-1.0.8 tensorboard-1.15.0 tensorflow-estimator-1.15.1 tensorflow-gpu-1.15.2\n","Collecting keras==2.3.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1b/18/2e1ef121e5560ac24c7ac9e363aa5fa7006c40563c989e7211aba95b793a/Keras-2.3.0-py2.py3-none-any.whl (377kB)\n","\u001b[K     |████████████████████████████████| 378kB 4.4MB/s \n","\u001b[?25hRequirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (2.10.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (1.1.2)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (3.13)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (1.18.5)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (1.4.1)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (1.0.8)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from keras==2.3.0) (1.15.0)\n","\u001b[31mERROR: fancyimpute 0.4.3 requires tensorflow, which is not installed.\u001b[0m\n","Installing collected packages: keras\n","  Found existing installation: Keras 2.4.3\n","    Uninstalling Keras-2.4.3:\n","      Successfully uninstalled Keras-2.4.3\n","Successfully installed keras-2.3.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IvWwfDEff5f2","outputId":"45aa398a-fe78-4661-bb96-cf40fc1bcdfe","colab":{"base_uri":"https://localhost:8080/","height":123}},"source":["import tensorflow as tf\n","print(tf.__version__)\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1.15.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AzLpxjUlgW4y","executionInfo":{"status":"ok","timestamp":1603294130887,"user_tz":-540,"elapsed":3138,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"8463123e-90e6-4b56-b33c-6b4ccdb1ac1f","colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["!git clone https://github.com/pjw9412/keras-retinanet.git\n","%cd /content/keras-retinanet/"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Cloning into 'keras-retinanet'...\n","remote: Enumerating objects: 5705, done.\u001b[K\n","remote: Total 5705 (delta 0), reused 0 (delta 0), pack-reused 5705\u001b[K\n","Receiving objects: 100% (5705/5705), 14.77 MiB | 32.66 MiB/s, done.\n","Resolving deltas: 100% (3825/3825), done.\n","/content/keras-retinanet\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UqCuu4YAgkXM","executionInfo":{"status":"ok","timestamp":1603294136536,"user_tz":-540,"elapsed":4903,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"d4f803ed-1864-409a-a336-a93a7b3bacdb","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["!python /content/keras-retinanet/setup.py install\n","!python setup.py build_ext --inplace"],"execution_count":null,"outputs":[{"output_type":"stream","text":["running install\n","running bdist_egg\n","running egg_info\n","creating keras_retinanet.egg-info\n","writing keras_retinanet.egg-info/PKG-INFO\n","writing dependency_links to keras_retinanet.egg-info/dependency_links.txt\n","writing entry points to keras_retinanet.egg-info/entry_points.txt\n","writing requirements to keras_retinanet.egg-info/requires.txt\n","writing top-level names to keras_retinanet.egg-info/top_level.txt\n","writing manifest file 'keras_retinanet.egg-info/SOURCES.txt'\n","writing manifest file 'keras_retinanet.egg-info/SOURCES.txt'\n","installing library code to build/bdist.linux-x86_64/egg\n","running install_lib\n","running build_py\n","creating build\n","creating build/lib.linux-x86_64-3.6\n","creating build/lib.linux-x86_64-3.6/tests\n","copying tests/__init__.py -> build/lib.linux-x86_64-3.6/tests\n","copying tests/test_losses.py -> build/lib.linux-x86_64-3.6/tests\n","creating build/lib.linux-x86_64-3.6/keras_retinanet\n","copying keras_retinanet/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet\n","copying keras_retinanet/initializers.py -> build/lib.linux-x86_64-3.6/keras_retinanet\n","copying keras_retinanet/losses.py -> build/lib.linux-x86_64-3.6/keras_retinanet\n","creating build/lib.linux-x86_64-3.6/tests/layers\n","copying tests/layers/__init__.py -> build/lib.linux-x86_64-3.6/tests/layers\n","copying tests/layers/test_filter_detections.py -> build/lib.linux-x86_64-3.6/tests/layers\n","copying tests/layers/test_misc.py -> build/lib.linux-x86_64-3.6/tests/layers\n","creating build/lib.linux-x86_64-3.6/tests/models\n","copying tests/models/__init__.py -> build/lib.linux-x86_64-3.6/tests/models\n","copying tests/models/test_densenet.py -> build/lib.linux-x86_64-3.6/tests/models\n","copying tests/models/test_mobilenet.py -> build/lib.linux-x86_64-3.6/tests/models\n","creating build/lib.linux-x86_64-3.6/tests/preprocessing\n","copying tests/preprocessing/test_generator.py -> build/lib.linux-x86_64-3.6/tests/preprocessing\n","copying tests/preprocessing/__init__.py -> build/lib.linux-x86_64-3.6/tests/preprocessing\n","copying tests/preprocessing/test_csv_generator.py -> build/lib.linux-x86_64-3.6/tests/preprocessing\n","creating build/lib.linux-x86_64-3.6/tests/backend\n","copying tests/backend/__init__.py -> build/lib.linux-x86_64-3.6/tests/backend\n","copying tests/backend/test_common.py -> build/lib.linux-x86_64-3.6/tests/backend\n","creating build/lib.linux-x86_64-3.6/tests/utils\n","copying tests/utils/__init__.py -> build/lib.linux-x86_64-3.6/tests/utils\n","copying tests/utils/test_anchors.py -> build/lib.linux-x86_64-3.6/tests/utils\n","copying tests/utils/test_transform.py -> build/lib.linux-x86_64-3.6/tests/utils\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/layers\n","copying keras_retinanet/layers/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/layers\n","copying keras_retinanet/layers/_misc.py -> build/lib.linux-x86_64-3.6/keras_retinanet/layers\n","copying keras_retinanet/layers/filter_detections.py -> build/lib.linux-x86_64-3.6/keras_retinanet/layers\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/densenet.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/vgg.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/retinanet.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/senet.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/mobilenet.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/effnet.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","copying keras_retinanet/models/resnet.py -> build/lib.linux-x86_64-3.6/keras_retinanet/models\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/bin\n","copying keras_retinanet/bin/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/bin\n","copying keras_retinanet/bin/evaluate.py -> build/lib.linux-x86_64-3.6/keras_retinanet/bin\n","copying keras_retinanet/bin/train.py -> build/lib.linux-x86_64-3.6/keras_retinanet/bin\n","copying keras_retinanet/bin/convert_model.py -> build/lib.linux-x86_64-3.6/keras_retinanet/bin\n","copying keras_retinanet/bin/debug.py -> build/lib.linux-x86_64-3.6/keras_retinanet/bin\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/callbacks\n","copying keras_retinanet/callbacks/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/callbacks\n","copying keras_retinanet/callbacks/eval.py -> build/lib.linux-x86_64-3.6/keras_retinanet/callbacks\n","copying keras_retinanet/callbacks/common.py -> build/lib.linux-x86_64-3.6/keras_retinanet/callbacks\n","copying keras_retinanet/callbacks/coco.py -> build/lib.linux-x86_64-3.6/keras_retinanet/callbacks\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/csv_generator.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/kitti.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/generator.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/open_images.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/coco.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","copying keras_retinanet/preprocessing/pascal_voc.py -> build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","copying keras_retinanet/backend/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","copying keras_retinanet/backend/theano_backend.py -> build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","copying keras_retinanet/backend/cntk_backend.py -> build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","copying keras_retinanet/backend/common.py -> build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","copying keras_retinanet/backend/tensorflow_backend.py -> build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","copying keras_retinanet/backend/dynamic.py -> build/lib.linux-x86_64-3.6/keras_retinanet/backend\n","creating build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/config.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/__init__.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/transform.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/visualization.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/eval.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/model.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/gpu.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/colors.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/keras_version.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/tf_version.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/anchors.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/image.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","copying keras_retinanet/utils/coco_eval.py -> build/lib.linux-x86_64-3.6/keras_retinanet/utils\n","running build_ext\n","cythoning keras_retinanet/utils/compute_overlap.pyx to keras_retinanet/utils/compute_overlap.c\n","/usr/local/lib/python3.6/dist-packages/Cython/Compiler/Main.py:369: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: /content/keras-retinanet/keras_retinanet/utils/compute_overlap.pyx\n","  tree = Parsing.p_module(s, pxd, full_module_name)\n","building 'keras_retinanet.utils.compute_overlap' extension\n","creating build/temp.linux-x86_64-3.6\n","creating build/temp.linux-x86_64-3.6/keras_retinanet\n","creating build/temp.linux-x86_64-3.6/keras_retinanet/utils\n","x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.6m -I/usr/local/lib/python3.6/dist-packages/numpy/core/include -c keras_retinanet/utils/compute_overlap.c -o build/temp.linux-x86_64-3.6/keras_retinanet/utils/compute_overlap.o\n","In file included from \u001b[01m\u001b[K/usr/local/lib/python3.6/dist-packages/numpy/core/include/numpy/ndarraytypes.h:1832:0\u001b[m\u001b[K,\n","                 from \u001b[01m\u001b[K/usr/local/lib/python3.6/dist-packages/numpy/core/include/numpy/ndarrayobject.h:12\u001b[m\u001b[K,\n","                 from \u001b[01m\u001b[K/usr/local/lib/python3.6/dist-packages/numpy/core/include/numpy/arrayobject.h:4\u001b[m\u001b[K,\n","                 from \u001b[01m\u001b[Kkeras_retinanet/utils/compute_overlap.c:610\u001b[m\u001b[K:\n","\u001b[01m\u001b[K/usr/local/lib/python3.6/dist-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2:\u001b[m\u001b[K \u001b[01;35m\u001b[Kwarning: \u001b[m\u001b[K#warning \"Using deprecated NumPy API, disable it with \" \"#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [\u001b[01;35m\u001b[K-Wcpp\u001b[m\u001b[K]\n"," #\u001b[01;35m\u001b[Kwarning\u001b[m\u001b[K \"Using deprecated NumPy API, disable it with \" \\\n","  \u001b[01;35m\u001b[K^~~~~~~\u001b[m\u001b[K\n","x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 build/temp.linux-x86_64-3.6/keras_retinanet/utils/compute_overlap.o -o build/lib.linux-x86_64-3.6/keras_retinanet/utils/compute_overlap.cpython-36m-x86_64-linux-gnu.so\n","creating build/bdist.linux-x86_64\n","creating build/bdist.linux-x86_64/egg\n","creating build/bdist.linux-x86_64/egg/tests\n","creating build/bdist.linux-x86_64/egg/tests/layers\n","copying build/lib.linux-x86_64-3.6/tests/layers/__init__.py -> build/bdist.linux-x86_64/egg/tests/layers\n","copying build/lib.linux-x86_64-3.6/tests/layers/test_filter_detections.py -> build/bdist.linux-x86_64/egg/tests/layers\n","copying build/lib.linux-x86_64-3.6/tests/layers/test_misc.py -> build/bdist.linux-x86_64/egg/tests/layers\n","copying build/lib.linux-x86_64-3.6/tests/__init__.py -> build/bdist.linux-x86_64/egg/tests\n","creating build/bdist.linux-x86_64/egg/tests/models\n","copying build/lib.linux-x86_64-3.6/tests/models/__init__.py -> build/bdist.linux-x86_64/egg/tests/models\n","copying build/lib.linux-x86_64-3.6/tests/models/test_densenet.py -> build/bdist.linux-x86_64/egg/tests/models\n","copying build/lib.linux-x86_64-3.6/tests/models/test_mobilenet.py -> build/bdist.linux-x86_64/egg/tests/models\n","creating build/bdist.linux-x86_64/egg/tests/preprocessing\n","copying build/lib.linux-x86_64-3.6/tests/preprocessing/test_generator.py -> build/bdist.linux-x86_64/egg/tests/preprocessing\n","copying build/lib.linux-x86_64-3.6/tests/preprocessing/__init__.py -> build/bdist.linux-x86_64/egg/tests/preprocessing\n","copying build/lib.linux-x86_64-3.6/tests/preprocessing/test_csv_generator.py -> build/bdist.linux-x86_64/egg/tests/preprocessing\n","copying build/lib.linux-x86_64-3.6/tests/test_losses.py -> build/bdist.linux-x86_64/egg/tests\n","creating build/bdist.linux-x86_64/egg/tests/backend\n","copying build/lib.linux-x86_64-3.6/tests/backend/__init__.py -> build/bdist.linux-x86_64/egg/tests/backend\n","copying build/lib.linux-x86_64-3.6/tests/backend/test_common.py -> build/bdist.linux-x86_64/egg/tests/backend\n","creating build/bdist.linux-x86_64/egg/tests/utils\n","copying build/lib.linux-x86_64-3.6/tests/utils/__init__.py -> build/bdist.linux-x86_64/egg/tests/utils\n","copying build/lib.linux-x86_64-3.6/tests/utils/test_anchors.py -> build/bdist.linux-x86_64/egg/tests/utils\n","copying build/lib.linux-x86_64-3.6/tests/utils/test_transform.py -> build/bdist.linux-x86_64/egg/tests/utils\n","creating build/bdist.linux-x86_64/egg/keras_retinanet\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/layers\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/layers/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/layers\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/layers/_misc.py -> build/bdist.linux-x86_64/egg/keras_retinanet/layers\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/layers/filter_detections.py -> build/bdist.linux-x86_64/egg/keras_retinanet/layers\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/densenet.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/vgg.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/retinanet.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/senet.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/mobilenet.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/effnet.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/models/resnet.py -> build/bdist.linux-x86_64/egg/keras_retinanet/models\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/bin\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/bin/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/bin\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/bin/evaluate.py -> build/bdist.linux-x86_64/egg/keras_retinanet/bin\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/bin/train.py -> build/bdist.linux-x86_64/egg/keras_retinanet/bin\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/bin/convert_model.py -> build/bdist.linux-x86_64/egg/keras_retinanet/bin\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/bin/debug.py -> build/bdist.linux-x86_64/egg/keras_retinanet/bin\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/callbacks\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/callbacks/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/callbacks\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/callbacks/eval.py -> build/bdist.linux-x86_64/egg/keras_retinanet/callbacks\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/callbacks/common.py -> build/bdist.linux-x86_64/egg/keras_retinanet/callbacks\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/callbacks/coco.py -> build/bdist.linux-x86_64/egg/keras_retinanet/callbacks\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/initializers.py -> build/bdist.linux-x86_64/egg/keras_retinanet\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/csv_generator.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/kitti.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/generator.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/open_images.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/coco.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/preprocessing/pascal_voc.py -> build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/losses.py -> build/bdist.linux-x86_64/egg/keras_retinanet\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/backend/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/backend/theano_backend.py -> build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/backend/cntk_backend.py -> build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/backend/common.py -> build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/backend/tensorflow_backend.py -> build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/backend/dynamic.py -> build/bdist.linux-x86_64/egg/keras_retinanet/backend\n","creating build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/config.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/__init__.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/transform.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/visualization.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/eval.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/compute_overlap.cpython-36m-x86_64-linux-gnu.so -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/model.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/gpu.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/colors.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/keras_version.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/tf_version.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/anchors.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/image.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/coco_eval.py -> build/bdist.linux-x86_64/egg/keras_retinanet/utils\n","byte-compiling build/bdist.linux-x86_64/egg/tests/layers/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/layers/test_filter_detections.py to test_filter_detections.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/layers/test_misc.py to test_misc.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/models/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/models/test_densenet.py to test_densenet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/models/test_mobilenet.py to test_mobilenet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/preprocessing/test_generator.py to test_generator.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/preprocessing/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/preprocessing/test_csv_generator.py to test_csv_generator.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/test_losses.py to test_losses.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/backend/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/backend/test_common.py to test_common.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/utils/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/utils/test_anchors.py to test_anchors.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/tests/utils/test_transform.py to test_transform.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/layers/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/layers/_misc.py to _misc.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/layers/filter_detections.py to filter_detections.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/densenet.py to densenet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/vgg.py to vgg.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/retinanet.py to retinanet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/senet.py to senet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/mobilenet.py to mobilenet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/effnet.py to effnet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/models/resnet.py to resnet.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/bin/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/bin/evaluate.py to evaluate.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/bin/train.py to train.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/bin/convert_model.py to convert_model.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/bin/debug.py to debug.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/callbacks/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/callbacks/eval.py to eval.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/callbacks/common.py to common.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/callbacks/coco.py to coco.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/initializers.py to initializers.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/csv_generator.py to csv_generator.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/kitti.py to kitti.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/generator.py to generator.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/open_images.py to open_images.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/coco.py to coco.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/preprocessing/pascal_voc.py to pascal_voc.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/losses.py to losses.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/backend/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/backend/theano_backend.py to theano_backend.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/backend/cntk_backend.py to cntk_backend.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/backend/common.py to common.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/backend/tensorflow_backend.py to tensorflow_backend.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/backend/dynamic.py to dynamic.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/config.py to config.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/__init__.py to __init__.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/transform.py to transform.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/visualization.py to visualization.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/eval.py to eval.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/model.py to model.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/gpu.py to gpu.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/colors.py to colors.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/keras_version.py to keras_version.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/tf_version.py to tf_version.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/anchors.py to anchors.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/image.py to image.cpython-36.pyc\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/coco_eval.py to coco_eval.cpython-36.pyc\n","creating stub loader for keras_retinanet/utils/compute_overlap.cpython-36m-x86_64-linux-gnu.so\n","byte-compiling build/bdist.linux-x86_64/egg/keras_retinanet/utils/compute_overlap.py to compute_overlap.cpython-36.pyc\n","creating build/bdist.linux-x86_64/egg/EGG-INFO\n","copying keras_retinanet.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying keras_retinanet.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying keras_retinanet.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying keras_retinanet.egg-info/entry_points.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying keras_retinanet.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying keras_retinanet.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","writing build/bdist.linux-x86_64/egg/EGG-INFO/native_libs.txt\n","zip_safe flag not set; analyzing archive contents...\n","keras_retinanet.bin.__pycache__.convert_model.cpython-36: module references __file__\n","keras_retinanet.bin.__pycache__.debug.cpython-36: module references __file__\n","keras_retinanet.bin.__pycache__.evaluate.cpython-36: module references __file__\n","keras_retinanet.bin.__pycache__.train.cpython-36: module references __file__\n","keras_retinanet.utils.__pycache__.compute_overlap.cpython-36: module references __file__\n","creating dist\n","creating 'dist/keras_retinanet-0.5.1-py3.6-linux-x86_64.egg' and adding 'build/bdist.linux-x86_64/egg' to it\n","removing 'build/bdist.linux-x86_64/egg' (and everything under it)\n","Processing keras_retinanet-0.5.1-py3.6-linux-x86_64.egg\n","creating /usr/local/lib/python3.6/dist-packages/keras_retinanet-0.5.1-py3.6-linux-x86_64.egg\n","Extracting keras_retinanet-0.5.1-py3.6-linux-x86_64.egg to /usr/local/lib/python3.6/dist-packages\n","Adding keras-retinanet 0.5.1 to easy-install.pth file\n","Installing retinanet-convert-model script to /usr/local/bin\n","Installing retinanet-debug script to /usr/local/bin\n","Installing retinanet-evaluate script to /usr/local/bin\n","Installing retinanet-train script to /usr/local/bin\n","\n","Installed /usr/local/lib/python3.6/dist-packages/keras_retinanet-0.5.1-py3.6-linux-x86_64.egg\n","Processing dependencies for keras-retinanet==0.5.1\n","Searching for keras-resnet==0.1.0\n","Reading https://pypi.org/simple/keras-resnet/\n","Downloading https://files.pythonhosted.org/packages/05/46/ad0b2d1a05d9497bd80c98a2c3f4d8be38a4601ace69af72814f5fafd851/keras-resnet-0.1.0.tar.gz#sha256=65a55f1c184e38d388cc2295ea4170475fe060d504d7e7950c255b81d72a0dfb\n","Best match: keras-resnet 0.1.0\n","Processing keras-resnet-0.1.0.tar.gz\n","Writing /tmp/easy_install-mr9vpwac/keras-resnet-0.1.0/setup.cfg\n","Running keras-resnet-0.1.0/setup.py -q bdist_egg --dist-dir /tmp/easy_install-mr9vpwac/keras-resnet-0.1.0/egg-dist-tmp-2rbqegqd\n","zip_safe flag not set; analyzing archive contents...\n","Moving keras_resnet-0.1.0-py3.6.egg to /usr/local/lib/python3.6/dist-packages\n","Adding keras-resnet 0.1.0 to easy-install.pth file\n","\n","Installed /usr/local/lib/python3.6/dist-packages/keras_resnet-0.1.0-py3.6.egg\n","Searching for progressbar2==3.38.0\n","Best match: progressbar2 3.38.0\n","Adding progressbar2 3.38.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for opencv-python==4.1.2.30\n","Best match: opencv-python 4.1.2.30\n","Adding opencv-python 4.1.2.30 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for Pillow==7.0.0\n","Best match: Pillow 7.0.0\n","Adding Pillow 7.0.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for Cython==0.29.21\n","Best match: Cython 0.29.21\n","Adding Cython 0.29.21 to easy-install.pth file\n","Installing cygdb script to /usr/local/bin\n","Installing cython script to /usr/local/bin\n","Installing cythonize script to /usr/local/bin\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for scipy==1.4.1\n","Best match: scipy 1.4.1\n","Adding scipy 1.4.1 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for six==1.15.0\n","Best match: six 1.15.0\n","Adding six 1.15.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for Keras==2.3.0\n","Best match: Keras 2.3.0\n","Adding Keras 2.3.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for python-utils==2.4.0\n","Best match: python-utils 2.4.0\n","Adding python-utils 2.4.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for numpy==1.18.5\n","Best match: numpy 1.18.5\n","Adding numpy 1.18.5 to easy-install.pth file\n","Installing f2py script to /usr/local/bin\n","Installing f2py3 script to /usr/local/bin\n","Installing f2py3.6 script to /usr/local/bin\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for Keras-Applications==1.0.8\n","Best match: Keras-Applications 1.0.8\n","Adding Keras-Applications 1.0.8 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for h5py==2.10.0\n","Best match: h5py 2.10.0\n","Adding h5py 2.10.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for PyYAML==3.13\n","Best match: PyYAML 3.13\n","Adding PyYAML 3.13 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for Keras-Preprocessing==1.1.2\n","Best match: Keras-Preprocessing 1.1.2\n","Adding Keras-Preprocessing 1.1.2 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Finished processing dependencies for keras-retinanet==0.5.1\n","running build_ext\n","skipping 'keras_retinanet/utils/compute_overlap.c' Cython extension (up-to-date)\n","copying build/lib.linux-x86_64-3.6/keras_retinanet/utils/compute_overlap.cpython-36m-x86_64-linux-gnu.so -> keras_retinanet/utils\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RNcoyS1wfF_8"},"source":["#### annotation 디렉토리와 image 디렉토리 설정. "]},{"cell_type":"code","metadata":{"id":"XagGLdHufF_9"},"source":["# annotation과 image 디렉토리 설정. annotation디렉토리에 있는 파일 확인. \n","import os\n","from pathlib import Path\n","\n","HOME_DIR = str(Path.home())\n","ANNO_DIR = os.path.join(HOME_DIR, '/content/drive/My Drive/Theraphy/House3/annotations')\n","IMAGE_DIR = os.path.join(HOME_DIR, '/content/drive/My Drive/Theraphy/House3/images')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-QANBZDufGBB"},"source":["### Esri 데이터 세트 학습"]},{"cell_type":"code","metadata":{"id":"Qz7Z3wn3fGBC","executionInfo":{"status":"ok","timestamp":1603294141639,"user_tz":-540,"elapsed":812,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"1d054370-f2ae-4695-f999-7e178f42c57c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import cv2\n","import numpy as np\n","import os\n","from os import listdir, walk\n","import math\n","import tensorflow as tf\n","from os.path import join\n","\n","from keras_retinanet import models\n","from keras_retinanet.bin.train import create_generators,create_models,create_callbacks\n","from keras_retinanet.models import backbone,load_model,convert_model\n","from keras_retinanet.utils.config import read_config_file,parse_anchor_parameters\n","from keras_retinanet.utils.visualization import draw_boxes\n","\n","#from imgaug import augmenters as iaa\n","\n","tf.set_random_seed(31) # SEEDS MAKE RESULTS MORE REPRODUCABLE\n","np.random.seed(17)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"vysrwu5kM49l"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"v6L2cRGJfGBI"},"source":["#### anchor  box 정보를 config.ini에 저장. \n","* Object 들이 너무 작기 때문에 default anchor로 수행 성능이 저하될 수 있음. \n","* anchor 최적화 스크립트 수행 후 anchor 값을 config.init에 설정할 수 있음. \n","*  Improving RetinaNet for CT Lesion Detection with Dense Masks from Weak RECIST Labels에 사용된 anchor box 최적화 모듈을 https://github.com/martinzlocha/anchor-optimization/ 에서 다운로드 가능 \n","* 여기서는 Winning 솔루션으로 설정된 anchor box를 그대로 사용함. \n","\n","#### Default anchor box 설정\n","sizes   = 32 64 128 256 512\n","strides = 8 16 32 64 128\n","ratios  = 0.5 1 2 3\n","scales  = 1 1.2 1.6\n","\n","#### Winning 솔루션으로 설정된 anchor box , 자동차의 경우 좀더 높이가 강조된 anchor box를 설정. \n","sizes   = 32 64 128 256 512\n","strides = 8 16 32 64 128\n","ratios  = 0.25 0.5 0.75 1 1.5 2 4 6 8 10\n","scales  = 0.5 1 2\n","\n","#### 코랩 버전은 강의 동영상에 있는 anchor-optimization utility를 사용하지 않음."]},{"cell_type":"code","metadata":{"id":"axwu2LOZfGBJ"},"source":["with open('/content/keras-retinanet/snapshots/config_poolncar.ini','w') as f:\n","    f.write('[anchor_parameters]\\nsizes   = 32 64 128 256 512\\nstrides = 8 16 32 64 128\\nratios  = 0.25 0.5 0.75 1 1.5 2 4 6 8 10\\nscales  = 0.5 1 2\\n')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xyvESwVOkh8x"},"source":["# Set Annotations\n","import csv\n","\n","f = open('/content/drive/My Drive/Theraphy/House3/annotations/house3.csv', 'r', encoding='utf-8')\n","\n","reader = csv.reader(f)\n","next(reader)   # skip header\n","\n","tmp_list = []\n","\n","# .csv -> list\n","for line in reader:\n","    tmp_list.append(line)\n","\n","f.close()\n","\n","bbox = []\n","filename = []\n","class_name = []\n","top = []\n","left = []\n","height = []\n","width = []\n","cnt = 1\n","\n","# 리스트 내 필요 영역 추출\n","for i in range(len(tmp_list)):\n","    bbox.append(tmp_list[i][3])\n","    while 1:\n","        cnt += 1  # bbox 문자열을 지우기 위한 트릭\n","        filename.append(tmp_list[i][9])\n","        top.append(bbox[i][bbox[i].index('\"top\"') + 6:bbox[i].index('left') - 2])\n","        left.append(bbox[i][bbox[i].index('left') + 6:bbox[i].index('height') - 2])\n","        height.append(bbox[i][bbox[i].index('height') + 8:bbox[i].index('width') - 2])\n","        width.append(bbox[i][bbox[i].index('width') + 7:bbox[i].index('instanceURI') - 3])\n","        class_name.append(bbox[i][bbox[i].index('value') + 8:bbox[i].index('color') - 3])\n","        cnt -= 1\n","        bbox[i] = bbox[i][bbox[i].index('instanceURI') + cnt:]\n","        # 리스트에 append한 top, left, height, width 는 지운다. (bbox 문자열에서 지운다)\n","        # 그리고 아래 if 문을 통해 또 다른 top, left...(오브젝트)가 있는지를 살핀다\n","        if bbox[i].find('\"top\"') == -1:   # 더 이상 탐지한 오브젝트가 없으면 quit\n","            cnt = 1\n","            break\n","\n","# csv 저장하기 (train)\n","f = open('/content/drive/My Drive/Theraphy/House3/annotations/train.csv', 'w', encoding='utf-8', newline='')\n","wr = csv.writer(f)\n","\n","for i in range(0, (len(filename)-len(filename)//10)): # 0 ~ 90%\n","    class_name[i] = class_name[i].replace('_', ' ')\n","    wr.writerow(['/content/drive/My Drive/Theraphy/House3/images/'+filename[i], int(left[i]), int(top[i]),  int(left[i])+int(width[i]), int(top[i])+int(height[i]),  class_name[i]])\n","    # x1,y1(자상단) x2,y2(좌하단) 좌표와 object 이름을 train.csv에 저장\n","\n","f.close()\n","\n","# csv 저장하기 (validation 10%)\n","f2 = open('/content/drive/My Drive/Theraphy/House3/annotations/valid.csv', 'w', encoding='utf-8', newline='')\n","wr2 = csv.writer(f2)\n","\n","for i in range((len(filename)-len(filename)//10), len(filename)): # 90 ~ 100%\n","    class_name[i] = class_name[i].replace('_', ' ')\n","    wr2.writerow(['/content/drive/My Drive/Theraphy/House3/images/'+filename[i], int(left[i]), int(top[i]),  int(left[i])+int(width[i]), int(top[i])+int(height[i]),  class_name[i]])\n","\n","f2.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f2D5XPR0Sqe7","executionInfo":{"status":"ok","timestamp":1598972314089,"user_tz":-540,"elapsed":17805,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"95856243-1645-4977-97a2-b06ce5b0b751","colab":{"base_uri":"https://localhost:8080/","height":419}},"source":["!pip uninstall keras_resnet\n","!pip install keras_resnet"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Uninstalling keras-resnet-0.1.0:\n","  Would remove:\n","    /usr/local/lib/python3.6/dist-packages/keras_resnet-0.1.0-py3.6.egg\n","Proceed (y/n)? y\n","  Successfully uninstalled keras-resnet-0.1.0\n","Collecting keras_resnet\n","  Downloading https://files.pythonhosted.org/packages/76/d4/a35cbd07381139dda4db42c81b88c59254faac026109022727b45b31bcad/keras-resnet-0.2.0.tar.gz\n","Requirement already satisfied: keras>=2.2.4 in /usr/local/lib/python3.6/dist-packages (from keras_resnet) (2.3.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (3.13)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.4.1)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.1.2)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.15.0)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.18.5)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (2.10.0)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.0.8)\n","Building wheels for collected packages: keras-resnet\n","  Building wheel for keras-resnet (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-resnet: filename=keras_resnet-0.2.0-py2.py3-none-any.whl size=20487 sha256=bbefc76ad43044d61ea806261604000b0ad9c114a022cd16818d2293929bc4a2\n","  Stored in directory: /root/.cache/pip/wheels/5f/09/a5/497a30fd9ad9964e98a1254d1e164bcd1b8a5eda36197ecb3c\n","Successfully built keras-resnet\n","\u001b[31mERROR: keras-retinanet 0.5.1 has requirement keras-resnet==0.1.0, but you'll have keras-resnet 0.2.0 which is incompatible.\u001b[0m\n","Installing collected packages: keras-resnet\n","Successfully installed keras-resnet-0.2.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cLLZu-idfGBO"},"source":["#### 주요 환경 설정\n","* 학습과 검증을 위한 csv annotation설정\n","* backbone은 resnet50\n","* batch_size=8\n","* epochs=35"]},{"cell_type":"code","metadata":{"id":"bbZoOUijfGBP"},"source":["b = backbone('resnet50')\n","files = os.listdir(IMAGE_DIR)\n","\n","class args:\n","    batch_size = 8\n","    config = read_config_file('/content/keras-retinanet/snapshots/config_poolncar.ini')\n","    random_transform =True # Image augmentation\n","    annotations = os.path.join(ANNO_DIR,'train.csv')\n","    val_annotations = os.path.join(ANNO_DIR,'valid.csv')\n","    classes = os.path.join(ANNO_DIR,'prac_class.txt')\n","    # 기본값은 min_side=800, max_side=1333\n","    # ESRI 2강 27분쯤\n","    image_min_side = 672\n","    image_max_side = 672\n","    no_resize=None\n","    dataset_type = 'csv'\n","    tensorboard_dir = ''\n","    evaluation = False\n","    snapshots = True\n","    snapshot_path = '/content/keras-retinanet/snapshots'\n","    backbone = 'resnet50'\n","    epochs = 2\n","    steps = len(files)//(batch_size)\n","    weighted_average = True\n","    #keras-retinanet 내부 버전 update로 추가 2020.07.31 // 코랩 버전 신규 추가. 왜?\n","    # reduce_lr_factor=0.1\n","    # reduce_lr_patience=2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l8BO195UfGBT"},"source":["#### 학습용 DataGenerator, 검증용 DataGenerator생성"]},{"cell_type":"code","metadata":{"id":"JMhFnkacfGBV"},"source":["train_gen,valid_gen = create_generators(args, b.preprocess_image)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2MEfy201fGBa"},"source":["#### 학습과 예측 기반 모델 생성\n","* Resnet50 backend 기반 모델 생성하고 이를 반환\n","* 단일 GPU 모델에서는 model과 training_model이 서로 같음"]},{"cell_type":"code","metadata":{"id":"EsPFa4FGfGBc","executionInfo":{"status":"ok","timestamp":1598760014632,"user_tz":-540,"elapsed":3717,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"451535a8-1e37-4c80-8493-4463c1c68914","colab":{"base_uri":"https://localhost:8080/","height":104}},"source":["model, training_model, prediction_model = create_models(\n","            backbone_retinanet=b.retinanet,\n","            num_classes=train_gen.num_classes(),\n","            weights=None,\n","            multi_gpu=False,\n","            freeze_backbone=True,\n","            lr=1e-3,\n","            config=args.config\n","        )\n","\n","\n","# Callback 생성\n","callbacks = create_callbacks(\n","    model,\n","    training_model,\n","    prediction_model,\n","    valid_gen,\n","    args\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tracking <tf.Variable 'Variable_5:0' shape=(30, 4) dtype=float32> anchors\n","tracking <tf.Variable 'Variable_6:0' shape=(30, 4) dtype=float32> anchors\n","tracking <tf.Variable 'Variable_7:0' shape=(30, 4) dtype=float32> anchors\n","tracking <tf.Variable 'Variable_8:0' shape=(30, 4) dtype=float32> anchors\n","tracking <tf.Variable 'Variable_9:0' shape=(30, 4) dtype=float32> anchors\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5QNq4xZPD_BG","executionInfo":{"status":"ok","timestamp":1598760088233,"user_tz":-540,"elapsed":6483,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"f60e000a-d41f-4813-fb7f-15bc3ee7dab6","colab":{"base_uri":"https://localhost:8080/","height":334}},"source":["%cd  /content/keras-retinanet/snapshots\n","!wget https://github.com/fizyr/keras-retinanet/releases/download/0.5.1/resnet50_coco_best_v2.1.0.h5"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/keras-retinanet/snapshots\n","--2020-08-30 04:01:20--  https://github.com/fizyr/keras-retinanet/releases/download/0.5.1/resnet50_coco_best_v2.1.0.h5\n","Resolving github.com (github.com)... 140.82.118.4\n","Connecting to github.com (github.com)|140.82.118.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/100249425/b7184a80-9350-11e9-9cc2-454f5c616394?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200830%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200830T040120Z&X-Amz-Expires=300&X-Amz-Signature=e27a49d3eecd30b11f1ea43d8516ee6351dbbc091405bfb5f5b452a09cad9da5&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=100249425&response-content-disposition=attachment%3B%20filename%3Dresnet50_coco_best_v2.1.0.h5&response-content-type=application%2Foctet-stream [following]\n","--2020-08-30 04:01:20--  https://github-production-release-asset-2e65be.s3.amazonaws.com/100249425/b7184a80-9350-11e9-9cc2-454f5c616394?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200830%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200830T040120Z&X-Amz-Expires=300&X-Amz-Signature=e27a49d3eecd30b11f1ea43d8516ee6351dbbc091405bfb5f5b452a09cad9da5&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=100249425&response-content-disposition=attachment%3B%20filename%3Dresnet50_coco_best_v2.1.0.h5&response-content-type=application%2Foctet-stream\n","Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.147.156\n","Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.147.156|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 152662144 (146M) [application/octet-stream]\n","Saving to: ‘resnet50_coco_best_v2.1.0.h5’\n","\n","resnet50_coco_best_ 100%[===================>] 145.59M  34.1MB/s    in 4.8s    \n","\n","2020-08-30 04:01:25 (30.1 MB/s) - ‘resnet50_coco_best_v2.1.0.h5’ saved [152662144/152662144]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oW0mOZfGfGBz"},"source":["#### training 모델에 최초 weight 로딩은 pretrained된 coco 모델의 weight값으로 로딩"]},{"cell_type":"code","metadata":{"id":"ktejhw8gfGB1","executionInfo":{"status":"ok","timestamp":1598760098562,"user_tz":-540,"elapsed":5808,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"4edda991-e301-43aa-d0b2-00b48ec5915a","colab":{"base_uri":"https://localhost:8080/","height":177}},"source":["training_model.load_weights('/content/keras-retinanet/snapshots/resnet50_coco_best_v2.1.0.h5',skip_mismatch=True,by_name=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py:1316: UserWarning: Skipping loading of weights for layer regression_submodel due to mismatch in shape ((3, 3, 256, 120) vs (36, 256, 3, 3)).\n","  weight_values[i].shape))\n","/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py:1316: UserWarning: Skipping loading of weights for layer regression_submodel due to mismatch in shape ((120,) vs (36,)).\n","  weight_values[i].shape))\n","/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py:1316: UserWarning: Skipping loading of weights for layer classification_submodel due to mismatch in shape ((3, 3, 256, 480) vs (720, 256, 3, 3)).\n","  weight_values[i].shape))\n","/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py:1316: UserWarning: Skipping loading of weights for layer classification_submodel due to mismatch in shape ((480,) vs (720,)).\n","  weight_values[i].shape))\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"tU3uZs8UfGCF"},"source":["#  ******** 학습 수행 ********* \n","* 주어진 epoch만큼, callback을 적용하며 training 모델의 학습 수행. "]},{"cell_type":"code","metadata":{"id":"HLSLeMnUfGCH","executionInfo":{"status":"ok","timestamp":1598760371195,"user_tz":-540,"elapsed":229749,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"119bfe34-8fa7-4144-f983-26f12a4f0b09","colab":{"base_uri":"https://localhost:8080/","height":194}},"source":["training_model.fit_generator(generator=train_gen,\n","        steps_per_epoch=args.steps,\n","        epochs=args.epochs,\n","        verbose=1,\n","        validation_data=valid_gen, \n","        callbacks=callbacks)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/2\n","36/36 [==============================] - 125s 3s/step - loss: 2.2977 - regression_loss: 1.7437 - classification_loss: 0.5541 - val_loss: 2.1274 - val_regression_loss: 1.3020 - val_classification_loss: 0.4015\n","\n","Epoch 00001: saving model to /content/keras-retinanet/snapshots/resnet50_csv_01.h5\n","Epoch 2/2\n","36/36 [==============================] - 62s 2s/step - loss: 1.5711 - regression_loss: 1.2146 - classification_loss: 0.3565 - val_loss: 2.0239 - val_regression_loss: 1.1970 - val_classification_loss: 0.3677\n","\n","Epoch 00002: saving model to /content/keras-retinanet/snapshots/resnet50_csv_02.h5\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.callbacks.History at 0x7fb4e40eb978>"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"3YGtn3kTvkgV"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"ZDrxtEDVfGCR"},"source":["# **Inference 프로세스**\n","#### 1.load_model()\n","#### 2.이미지 preprocessing\n","#### 3.Inference 수행. model.predict_on_batch()\n","#### 4.반환된 Bbox 정보 등을 이용해서 이미지 시각화.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"0U5d9Sl8ATL9"},"source":["####  convert_model.py를 이용하여 가장 마지막에 학습된 모델을 inference모델로 변환 (파일 생성)|"]},{"cell_type":"code","metadata":{"id":"7fGuOz0jfGCT"},"source":["# !cd ./keras-retinanet/snapshots; ls -lia\n","# export poolncar_dir=~/DLCV/Detection/retina/keras-retinanet/snapshots\n","#./keras_retinanet/bin/convert_model.py --config=$poolncar_dir/config_poolncar.ini $poolncar_dir/poolncar/resnet50_csv_35.h5 $poolncar_dir/poolncar/poolncar_inference.h5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nZ6_-Fphlifs","executionInfo":{"status":"ok","timestamp":1603294162990,"user_tz":-540,"elapsed":14292,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"d2934e8a-94e7-4eec-e99f-6228a056996d","colab":{"base_uri":"https://localhost:8080/","height":422}},"source":["!pip uninstall keras_resnet\n","!pip install keras_resnet"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Uninstalling keras-resnet-0.1.0:\n","  Would remove:\n","    /usr/local/lib/python3.6/dist-packages/keras_resnet-0.1.0-py3.6.egg\n","Proceed (y/n)? y\n","  Successfully uninstalled keras-resnet-0.1.0\n","Collecting keras_resnet\n","  Downloading https://files.pythonhosted.org/packages/76/d4/a35cbd07381139dda4db42c81b88c59254faac026109022727b45b31bcad/keras-resnet-0.2.0.tar.gz\n","Requirement already satisfied: keras>=2.2.4 in /usr/local/lib/python3.6/dist-packages (from keras_resnet) (2.3.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (3.13)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.1.2)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.18.5)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (2.10.0)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.0.8)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.4.1)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from keras>=2.2.4->keras_resnet) (1.15.0)\n","Building wheels for collected packages: keras-resnet\n","  Building wheel for keras-resnet (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-resnet: filename=keras_resnet-0.2.0-py2.py3-none-any.whl size=20487 sha256=080726227fd3e8fb412eecb0ebcf21250847bcc1bdf1657e6e35199d831336e3\n","  Stored in directory: /root/.cache/pip/wheels/5f/09/a5/497a30fd9ad9964e98a1254d1e164bcd1b8a5eda36197ecb3c\n","Successfully built keras-resnet\n","\u001b[31mERROR: keras-retinanet 0.5.1 has requirement keras-resnet==0.1.0, but you'll have keras-resnet 0.2.0 which is incompatible.\u001b[0m\n","Installing collected packages: keras-resnet\n","Successfully installed keras-resnet-0.2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wkeIm1ConyIZ","executionInfo":{"status":"error","timestamp":1603513018578,"user_tz":-540,"elapsed":1219,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"8a8f301a-7687-4e7a-e343-f47ccbfe8a8b","colab":{"base_uri":"https://localhost:8080/","height":274}},"source":["!./keras_retinanet/bin/convert_model.py \\\n","--config=/content/keras-retinanet/snapshots/config_poolncar.ini \\\n","/content/drive/My\\ Drive/Theraphy/House3/result/resnet50_csv_54.h5 \\\n","/content/drive/My\\ Drive/Theraphy/House3/result/house3_inference.h5\n","\n","model_path = os.path.join('/content/drive/My Drive/Theraphy/House3/result/','house3_inference.h5')\n","print(model_path)\n","# load retinanet model\n","poolncar_retina_model = models.load_model(model_path, backbone_name='resnet50')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/bin/bash: ./keras_retinanet/bin/convert_model.py: No such file or directory\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-4c6692c499ba>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'./keras_retinanet/bin/convert_model.py --config=/content/keras-retinanet/snapshots/config_poolncar.ini /content/drive/My\\\\ Drive/Theraphy/House3/result/resnet50_csv_54.h5 /content/drive/My\\\\ Drive/Theraphy/House3/result/house3_inference.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/My Drive/Theraphy/House3/result/'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'house3_inference.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# load retinanet model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'os' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"JUHd-pQRfGCp"},"source":["#### inference 모델을 이용하여 Object Detection 수행. (이미지 preprocessing 및 Inference 수행)"]},{"cell_type":"code","metadata":{"id":"YhXDPR25fGCy"},"source":["import cv2\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image\n","from keras_retinanet.utils.visualization import draw_box, draw_caption\n","from keras_retinanet.utils.colors import label_color\n","from fractions import Fraction    # 분수\n","from decimal import *             # 소수\n","\n","\n","def get_detected_image_retina(model, img_array, convert_RGB=True, is_print=True):\n","    \n","    # copy to draw on\n","    draw = img_array.copy()\n","    \n","    # 원본 이미지 사이즈\n","    print('before size = ', img_array.shape)\n","    height, width, channels = img_array.shape\n","    before_halfwidth = width*0.5\n","    before_halfheight = height*0.5\n","    before_Area = height * width\n","\n","    # 2.preprocess images\n","    if convert_RGB:\n","        draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n","    img_array = preprocess_image(img_array)\n","    # 학습할 때 672x672로 했기 때문에 Inference할 때도 672x672\n","    img_array, scale = resize_image(img_array, 672, 672)\n","\n","    #####\n","    print('after size = ', img_array.shape, ' scale = ', scale)\n","\n","    # 3.process image (Inference 수행)\n","    start = time.time()\n","    boxes, scores, labels = model.predict_on_batch(np.expand_dims(img_array, axis=0))       # np.expand_dims : 3차원 이미지를 4차원으로. 왜?\n","    if is_print:\n","        print(\"object detection 처리 시간: \", round(time.time() - start,5))\n","    \n","    # correct for image scale\n","    boxes /= scale  # resize된 이미지 비율만큼 박스 크기를 조정?\n","\n","    \n","    classes=['window','house','door','roof','triangle roof', 'fense', 'smoking chimney','ground line', 'achromatic sun', 'side door',\n","             'veiled window', 'poor wall' 'solid wall', 'half sun', 'patterned roof', 'broken house']\n","\n","    # 4.visualize detections\n","    # boxes에는 이미지에서 디텍션해낸 모든 bbox가 들어있음. boxes, socres, labels의 개수는 같음.\n","    # 만약 300개의 오브젝트를 디텍트했다면, for문은 300번 반복.\n","    for i,(box, score, label)  in enumerate(zip(boxes[0], scores[0], labels[0])):\n","        print(i)\n","        \n","        # scores are sorted so we can break\n","        print('score = ', score)\n","        if score < 0.5:\n","            break\n","\n","        color = label_color(label)\n","        b = box.astype(int)         # 좌표값이 float이면은 bbox를 그릴 때 오류가 난다. 따라서 int로 변환.\n","\n","        caption = \"{} {:.3f}\".format(classes[label], score)\n","        print('caption:', caption)\n","        cv2.rectangle(draw, (box[0],box[1]), (box[2], box[3]), color, thickness=2)\n","        cv2.putText(draw, caption, (b[0], b[1] - 5), cv2.FONT_HERSHEY_COMPLEX, 0.7, color, 1)\n","\n","        #### 집 object의 비율 계산하기\n","        if classes[label] == 'house':\n","          print('house founded')\n","          print('name = ', classes[label])\n","          print('직사각형 좌표 : (',box[0],',',box[1],'), (',box[2],',',box[3],')')\n","          print('직사각형의 가로 =', box[2]-box[0])\n","          print('직사각형의 세로 =', box[3]-box[1])\n","          bBoxArea = ( box[2]-box[0]) * (box[3]-box[1])\n","          print('box2 = ', box[2])\n","          print('halfWidth = ', before_halfwidth)\n","\n","          # if ~ elif 주의\n","          # 444 지나치게 큰 집(3/4) \n","          # 공격성 1 사회불안 1\n","          if (get_boxRatio(before_Area, bBoxArea) >= 0.75):\n","             print('3/4 이상 -> 지나치게 큰 집')\n","          \n","          # 555 지나치게 작은집 (1/4)\n","          # 우울 1 자존감 1 정서불안 1 열등감 1 퇴행 1\n","          elif (get_boxRatio(before_Area, bBoxArea) <= 0.25):\n","             print('1/4 이하 -> 지나치게 작은 집')\n","\n","          # 777 위치 (좌측) -> 집의 우측하단 x좌표가 이미지 가로길이 절반에 못 미치면,\n","          # 자존감 1 애정결핍 1\n","          if (box[2] < before_halfwidth ):\n","              print('좌측에 위치한 집')\n","              print(box[2],' < ', before_halfwidth ) \n","          \n","          # 888 위치 (우측) -> 집의 좌측상단 x좌표가 이미지 가로길이 절반을 넘어서면,\n","          # 공격성 1\n","          elif (box[0] > before_halfwidth):\n","              print('우측에 위치한 집')\n","              print(box[0], ' > ', before_halfwidth)\n","\n","\n","          # 999 위치 (하단) -> 집의 좌측상단 y좌표가 이미지 세로길이 절반에 못 미치면,\n","          # box[1] y좌표는 아래(0)로부터 값이 상승하지만, halfheight 이미지 세로의 절반은 위(0)에서부터 값이 상승하는 독특한 구조.\n","          # 우울 1 자존감 1 정서불안 1 열등감 1\n","          if (box[1] > before_halfheight):\n","              print('하단에 위치한 집')\n","              print(box[1], ' > ', before_halfheight)\n","\n","\n","    if is_print:\n","        print(\"이미지 processing 시간2: \", round(time.time() - start,5))\n","    \n","    return draw\n","\n","def get_boxRatio(imgArea, bBoxArea):\n","  # detect한 object 넓이 / 전체 이미지 넓이.\n","  # 분수로 만든 후 소수->비율로 변환 -> object가 이미지 내에서 얼만큼의 비율을 갖는지 알 수 있다.\n","  # 비율 = 0.xx형태. 비율이 0.75보다 큰 경우 이미지 내에서 3/4를 차지하는 것.\n","  print('********** get_boxRatio START********')\n","  b = (imgArea)\n","  a = int(bBoxArea)\n","  print(a)\n","  print(b)\n","  frac = Fraction(a, b)\n","  print(frac)\n","  decimal =float(frac)\n","  print(decimal)\n","  getcontext().prec=2\n","  ratio = Decimal(decimal).quantize(Decimal('0.00'))\n","  print('HOUSE RATIO = ', ratio)\n","\n","  print('********** get_boxRatio END *********')\n","\n","  return ratio\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hoBkLNpwfGC5","executionInfo":{"status":"ok","timestamp":1603297775531,"user_tz":-540,"elapsed":1744,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"297dc33f-91f2-428b-87c0-e17a6680e8b2","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["img_array  = cv2.imread(os.path.join('/content/drive/My Drive/Theraphy/House3/testset', 'House_294.jpg'))\n","detected_image = get_detected_image_retina(poolncar_retina_model,img_array, convert_RGB=True, is_print=True)\n","\n","plt.figure(figsize=(12, 12))\n","plt.imshow(detected_image)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["before size =  (1024, 1024, 3)\n","after size =  (672, 672, 3)  scale =  0.65625\n","object detection 처리 시간:  0.11216\n","0\n","score =  0.97958595\n","caption: house 0.980\n","house founded\n","name =  house\n","직사각형 좌표 : ( 157.93138 , 251.9015 ), ( 866.5013 , 943.4567 )\n","직사각형의 가로 = 708.5699\n","직사각형의 세로 = 691.55524\n","box2 =  866.5013\n","halfWidth =  512.0\n","********** get_boxRatio START********\n","490015\n","1048576\n","490015/1048576\n","0.4673147201538086\n","HOUSE RATIO =  0.47\n","********** get_boxRatio END *********\n","********** get_boxRatio START********\n","490015\n","1048576\n","490015/1048576\n","0.4673147201538086\n","HOUSE RATIO =  0.47\n","********** get_boxRatio END *********\n","1\n","score =  0.94406426\n","caption: triangle roof 0.944\n","2\n","score =  0.9408732\n","caption: door 0.941\n","3\n","score =  0.8802432\n","caption: window 0.880\n","4\n","score =  0.5559392\n","caption: smoking chimney 0.556\n","5\n","score =  0.52456963\n","caption: smoking chimney 0.525\n","6\n","score =  0.4695141\n","이미지 processing 시간2:  0.11696\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x864 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"vKfNRM7PtnK2","executionInfo":{"status":"ok","timestamp":1600070553296,"user_tz":-540,"elapsed":18845,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"64ac4a7c-c195-49a3-9ddd-ea58126733a1","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Q7Bo_Ax2wn9H6NUK8VOQOweiIZ3KQCsJ"}},"source":["import numpy as np\n","from PIL import Image\n","import glob\n","np.random.seed(120)\n","\n","# 모든 이미지 파일중에서 임의의 16개 파일만 설정. \n","all_image_files = glob.glob('/content/drive/My Drive/Theraphy/House3/images' + '/*.jpg')\n","all_image_files = np.array(all_image_files)\n","file_cnt = all_image_files.shape[0]\n","show_cnt = 16\n","\n","show_indexes = np.random.choice(file_cnt, show_cnt)\n","show_files = all_image_files[show_indexes]\n","print(show_files)\n","\n","detected_images = []\n","for filename in show_files:\n","    img_array = cv2.imread(os.path.join('/content/drive/My Drive/Theraphy/House3/testset', filename))\n","    detected_image = get_detected_image_retina(poolncar_retina_model,img_array, is_print=True)\n","    img_rgb = cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB)\n","    plt.figure(figsize=(15, 15))\n","    plt.imshow(detected_image)\n","    plt.show()\n","    print(\"--------------------------------------------------\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"rAHvay34fGC_"},"source":["#### validation dataset 기반으로 mAP 계산"]},{"cell_type":"code","metadata":{"id":"OStyqwCTfGDA"},"source":["import os\n","\n","class args:\n","    batch_size=8\n","    dataset_type='csv'\n","    score_threshold=0.05\n","    iou_threshold=0.5\n","    max_detections=100\n","    image_min_side=672\n","    image_max_side=672\n","    config=None\n","    annotations=os.path.join('/content/drive/My Drive/Theraphy/House3/annotations/', 'train.csv')\n","    classes=os.path.join('/content/drive/My Drive/Theraphy/House3/annotations/', 'prac_class.txt')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ws0IWo_afGDE","executionInfo":{"status":"ok","timestamp":1598446036385,"user_tz":-540,"elapsed":77527,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"0d201cc9-c943-417f-c767-78eeb6318c21","colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["from keras_retinanet.bin.evaluate import create_generator as eval_create_generator\n","from keras_retinanet.utils.eval import evaluate\n","\n","generator = eval_create_generator(args, b.preprocess_image)\n","average_precisions, inference_time = evaluate(\n","            generator,\n","            poolncar_retina_model,\n","            iou_threshold=args.iou_threshold,\n","            score_threshold=args.score_threshold,\n","            max_detections=args.max_detections,\n","            save_path=None\n","        )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Running network: 100% (263 of 263) |#####| Elapsed Time: 0:01:15 Time:  0:01:15\n","Parsing annotations: 100% (263 of 263) |#| Elapsed Time: 0:00:00 Time:  0:00:00\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"OfBwH4bqfGDI","executionInfo":{"status":"ok","timestamp":1598446110196,"user_tz":-540,"elapsed":640,"user":{"displayName":"박재욱","photoUrl":"","userId":"14943746074325746456"}},"outputId":"a826d39f-7b59-4ade-e3b0-885f04c0d9f6","colab":{"base_uri":"https://localhost:8080/","height":372}},"source":["# print evaluation\n","total_instances = []\n","precisions = []\n","for label, (average_precision, num_annotations) in average_precisions.items():\n","    print('{:.0f} instances of class'.format(num_annotations),\n","          generator.label_to_name(label), 'with average precision: {:.4f}'.format(average_precision))\n","    total_instances.append(num_annotations)\n","    precisions.append(average_precision)\n","\n","if sum(total_instances) == 0:\n","    print('No test instances found.')\n","\n","print('Inference time for {:.0f} images: {:.4f}'.format(generator.size(), inference_time))\n","\n","print('mAP using the weighted average of precisions among classes: {:.4f}'.format(sum([a * b for a, b in zip(total_instances, precisions)]) / sum(total_instances)))\n","print('mAP: {:.4f}'.format(sum(precisions) / sum(x > 0 for x in total_instances)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["557 instances of class window with average precision: 0.9800\n","272 instances of class house with average precision: 0.9856\n","253 instances of class door with average precision: 0.9693\n","53 instances of class roof with average precision: 0.7753\n","201 instances of class triangle roof with average precision: 0.9190\n","66 instances of class fense with average precision: 0.8946\n","54 instances of class smoking chimney with average precision: 0.7890\n","40 instances of class ground line with average precision: 0.0526\n","6 instances of class achromatic sun with average precision: 0.9762\n","4 instances of class side door with average precision: 0.1509\n","5 instances of class veiled window with average precision: 0.4323\n","0 instances of class poor wall with average precision: 0.0000\n","1 instances of class solid wall with average precision: 0.3333\n","1 instances of class half sun with average precision: 0.0000\n","0 instances of class patterned roof with average precision: 0.0000\n","0 instances of class broken house with average precision: 0.0000\n","Inference time for 263 images: 0.2314\n","mAP using the weighted average of precisions among classes: 0.9238\n","mAP: 0.6352\n"],"name":"stdout"}]}]}