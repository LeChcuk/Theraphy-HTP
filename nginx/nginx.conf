events {
  worker_connections  1024;
}

http {
  include mime.types;
  include /etc/nginx/sites-enabled/*;
  default_type       application/octet-stream;
  log_format  main   '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
  access_log         /var/log/nginx/access.log  main;
  sendfile           on;
  keepalive_timeout  65;

  upstream docker-front{
    server frontend:3000;
  }

  upstream docker-node {
    server backend-node:3001;
  }

  upstream docker-flask {
    server backend-flask:5000;
  }

  # server { # not work
  #   listen 80;
  #   server_name localhost 127.0.0.1;
  #   add_header Access-Control-Allow-Origin *;

  #   location / { 
  #     proxy_pass http://127.0.0.1:3000;
  #   }

  #   location /node {
  #     proxy_pass http://docker-node/$request_uri;
  #   }
  # }

  server{ # v************working! ****************
    listen 3000;
    server_name localhost 127.0.0.1;
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

    location / {
      root /app/build;
      index index.html;
      # try_files $uri $uri/ /index.html;
    }
  }

  server {
    listen 3001;
    server_name localhost 127.0.0.1;
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

    location /node {
      root /app/build;
      index index.html;
      
      proxy_method POST;
      proxy_pass http://docker-node/node/$request_uri;
    }
  }

  server {
    listen 5000;
    server_name localhost 127.0.0.1;
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

    location /predict {
      proxy_method POST;
      proxy_pass http://docker-flask/$request_uri;
    }
  }

  server{ # **************** working!! ************
    listen 8080;

    location / {
      return 200 "hi";
    }
  }

  
}